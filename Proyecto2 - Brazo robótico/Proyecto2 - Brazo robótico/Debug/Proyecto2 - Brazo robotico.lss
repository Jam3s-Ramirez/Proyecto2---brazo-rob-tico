
Proyecto2 - Brazo robotico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000caa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00000d1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014bc  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a49  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b1c  00000000  00000000  00002de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d64  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  88:	0c 94 53 06 	jmp	0xca6	; 0xca6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 

#include "ADC.h"

void initADC(void){
	ADMUX |= (1<<REFS0);	// VREF = AVCC
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);	// VREF = AVCC
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);	// 10bits
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24
	
	// Prescaler 128 - 16M/128 = 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN);	// ON ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	// DESABILITAR ENTRADAS DIGITALES DE PC0, PC1 Y PC2.
	DIDR0 |= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D);
  b6:	ee e7       	ldi	r30, 0x7E	; 126
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <adcread>:
}

uint16_t adcread(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// SELECCIONA EL CANAL A USAR
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);	// INICIA LA CONVERSION DEL ADC
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	while ((ADCSRA)&(1<<ADSC));	// BUCLE DE QUE HASTA QUE FINALICE LA CONVERSION
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	86 fd       	sbrc	r24, 6
  de:	fc cf       	rjmp	.-8      	; 0xd8 <adcread+0x16>
	return(ADC);
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  e8:	08 95       	ret

000000ea <readADC>:

// Función para leer un valor de ADC de un pin específico
uint8_t readADC(uint8_t pin) {
	// Mapear el pin a la correspondiente entrada del ADC
	uint8_t canal = 0;	
	switch (pin) {
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	31 f0       	breq	.+12     	; 0xfa <readADC+0x10>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	31 f0       	breq	.+12     	; 0xfe <readADC+0x14>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	31 f0       	breq	.+12     	; 0x102 <readADC+0x18>
uint8_t estado = 0;

// Función para leer un valor de ADC de un pin específico
uint8_t readADC(uint8_t pin) {
	// Mapear el pin a la correspondiente entrada del ADC
	uint8_t canal = 0;	
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	05 c0       	rjmp	.+10     	; 0x104 <readADC+0x1a>
	switch (pin) {
		case 0: canal = 0; break; // PC0
		case 1: canal = 1; break; // PC1
		case 2: canal = 2; break; // PC2
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	03 c0       	rjmp	.+6      	; 0x104 <readADC+0x1a>
		case 3: canal = 3; break; // PC3
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	01 c0       	rjmp	.+2      	; 0x104 <readADC+0x1a>
uint8_t readADC(uint8_t pin) {
	// Mapear el pin a la correspondiente entrada del ADC
	uint8_t canal = 0;	
	switch (pin) {
		case 0: canal = 0; break; // PC0
		case 1: canal = 1; break; // PC1
 102:	81 e0       	ldi	r24, 0x01	; 1
		case 2: canal = 2; break; // PC2
		case 3: canal = 3; break; // PC3
	}
	// Realizar la conversión ADC y devolver el resultado
	return adcread(canal);
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 61 00 	call	0xc2	; 0xc2 <adcread>
}
 10a:	08 95       	ret

0000010c <escribirADCEnEEPROM>:

// Función para escribir los valores del ADC en la EEPROM
void escribirADCEnEEPROM(uint8_t offset) {
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c8 2f       	mov	r28, r24
	eeprom_update_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset), readADC(0));
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	68 2f       	mov	r22, r24
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset + 1), readADC(1));
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 128:	68 2f       	mov	r22, r24
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset + 2), readADC(2));
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 138:	68 2f       	mov	r22, r24
 13a:	ce 01       	movw	r24, r28
 13c:	02 96       	adiw	r24, 0x02	; 2
 13e:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset + 3), readADC(3));
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 148:	68 2f       	mov	r22, r24
 14a:	ce 01       	movw	r24, r28
 14c:	03 96       	adiw	r24, 0x03	; 3
 14e:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_byte>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <leerEEPROMYActualizarADC>:

// Función para leer los valores de la EEPROM y actualizar los valores ADC
void leerEEPROMYActualizarADC(uint8_t offset) {
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	adcvalue1 = eeprom_read_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset));
 15c:	c8 2f       	mov	r28, r24
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	0e 94 39 06 	call	0xc72	; 0xc72 <eeprom_read_byte>
 166:	68 2f       	mov	r22, r24
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 172:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <adcvalue1>
 176:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <adcvalue1+0x1>
 17a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <adcvalue1+0x2>
 17e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <adcvalue1+0x3>
	adcvalue2 = eeprom_read_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset + 1));
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 39 06 	call	0xc72	; 0xc72 <eeprom_read_byte>
 18a:	68 2f       	mov	r22, r24
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 196:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <adcvalue2>
 19a:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <adcvalue2+0x1>
 19e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <adcvalue2+0x2>
 1a2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <adcvalue2+0x3>
	adcvalue3 = eeprom_read_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset + 2));
 1a6:	ce 01       	movw	r24, r28
 1a8:	02 96       	adiw	r24, 0x02	; 2
 1aa:	0e 94 39 06 	call	0xc72	; 0xc72 <eeprom_read_byte>
 1ae:	68 2f       	mov	r22, r24
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 1ba:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <adcvalue3>
 1be:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <adcvalue3+0x1>
 1c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adcvalue3+0x2>
 1c6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adcvalue3+0x3>
	adcvalue4 = eeprom_read_byte((uint8_t *)(EEPROM_ADDRESS_ADC_PC0_PC3 + offset + 3));
 1ca:	ce 01       	movw	r24, r28
 1cc:	03 96       	adiw	r24, 0x03	; 3
 1ce:	0e 94 39 06 	call	0xc72	; 0xc72 <eeprom_read_byte>
 1d2:	68 2f       	mov	r22, r24
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 1de:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <adcvalue4>
 1e2:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <adcvalue4+0x1>
 1e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adcvalue4+0x2>
 1ea:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <adcvalue4+0x3>
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:

int main() {
	cli();
 1f4:	f8 94       	cli
	
	initADC();
 1f6:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM1();
 1fa:	0e 94 9b 02 	call	0x536	; 0x536 <initPWM1>
	initPWM0A(no_invertido, 1024);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	74 e0       	ldi	r23, 0x04	; 4
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 62 02 	call	0x4c4	; 0x4c4 <initPWM0A>
	initPWM2A(no_invertido, 1024);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	74 e0       	ldi	r23, 0x04	; 4
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <initPWM2A>
	
	// Habilitar las interrupciones por cambio de pin
	
	PCICR |= (1<<PCIE0);
 212:	e8 e6       	ldi	r30, 0x68	; 104
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0);
 21c:	ab e6       	ldi	r26, 0x6B	; 107
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	8c 91       	ld	r24, X
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8c 93       	st	X, r24
	
	PCICR |= (1<<PCIE2);
 226:	80 81       	ld	r24, Z
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT2) | (1<<PCINT3) | (1<<PCINT4) | (1<<PCINT7);
 22c:	ed e6       	ldi	r30, 0x6D	; 109
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8c 69       	ori	r24, 0x9C	; 156
 234:	80 83       	st	Z, r24
	
	// Configurar los botones como entrada
	DDRD &= ~(1<<DDD7) & ~(1<<DDD4) & ~(1<<DDD3) & ~(1<<DDD2); // Pin PD4, PD3, PD2 como entrada
 236:	8a b1       	in	r24, 0x0a	; 10
 238:	83 76       	andi	r24, 0x63	; 99
 23a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2); // Habilita Pull-Up
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	8c 69       	ori	r24, 0x9C	; 156
 240:	8b b9       	out	0x0b, r24	; 11
	
	DDRB &= ~(1<<DDB0); // Pin PB0 como entrada
 242:	84 b1       	in	r24, 0x04	; 4
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); // Habilita Pull-Up
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	85 b9       	out	0x05, r24	; 5
	
	// Configurar los LEDs como salida
	DDRB |= (1 << DDB5); // Pin PB5 como salida (LED)
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	80 62       	ori	r24, 0x20	; 32
 252:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD7); // Pin PB5 como salida (LED)
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	80 68       	ori	r24, 0x80	; 128
 258:	8a b9       	out	0x0a, r24	; 10
	
	sei(); // Habilitar interrupciones globales
 25a:	78 94       	sei
	
	// Limpiar la bandera de interrupción PCINT0
	PCIFR |= (1<<PCIF0);
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	8b bb       	out	0x1b, r24	; 27
	
	while (1) {
		
		if (estado == 0) {
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 266:	81 11       	cpse	r24, r1
 268:	6e c0       	rjmp	.+220    	; 0x346 <main+0x152>
			PORTB |= (1 << PB5); // Encender LED
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1 << PD7); // Apagar LED (PD7 si tienes otro LED aquí)
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8f 77       	andi	r24, 0x7F	; 127
 274:	8b b9       	out	0x0b, r24	; 11
			
			adcvalue1 = readADC(0);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 27c:	68 2f       	mov	r22, r24
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 288:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <adcvalue1>
 28c:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <adcvalue1+0x1>
 290:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <adcvalue1+0x2>
 294:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <adcvalue1+0x3>
			writecanalA(adcvalue1);
 298:	0e 94 15 03 	call	0x62a	; 0x62a <writecanalA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	9c e9       	ldi	r25, 0x9C	; 156
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0xac>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xb2>
 2a6:	00 00       	nop
			_delay_ms(10);
			
			adcvalue2 = readADC(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 2ae:	68 2f       	mov	r22, r24
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 2ba:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <adcvalue2>
 2be:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <adcvalue2+0x1>
 2c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <adcvalue2+0x2>
 2c6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <adcvalue2+0x3>
			writecanalB(adcvalue2);
 2ca:	0e 94 47 03 	call	0x68e	; 0x68e <writecanalB>
 2ce:	8f e3       	ldi	r24, 0x3F	; 63
 2d0:	9c e9       	ldi	r25, 0x9C	; 156
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0xde>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0xe4>
 2d8:	00 00       	nop
			_delay_ms(10);
			
			adcvalue3 = readADC(2);
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 2e0:	c8 2f       	mov	r28, r24
 2e2:	68 2f       	mov	r22, r24
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 2ee:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <adcvalue3>
 2f2:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <adcvalue3+0x1>
 2f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adcvalue3+0x2>
 2fa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adcvalue3+0x3>
			updateDutyCA2(adcvalue3);
 2fe:	8c 2f       	mov	r24, r28
 300:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <updateDutyCA2>
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	9c e9       	ldi	r25, 0x9C	; 156
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x114>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x11a>
 30e:	00 00       	nop
			_delay_ms(10);
			
			adcvalue4 = readADC(3);
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	0e 94 75 00 	call	0xea	; 0xea <readADC>
 316:	c8 2f       	mov	r28, r24
 318:	68 2f       	mov	r22, r24
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 324:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <adcvalue4>
 328:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <adcvalue4+0x1>
 32c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adcvalue4+0x2>
 330:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <adcvalue4+0x3>
			updateDutyCA(adcvalue4);
 334:	8c 2f       	mov	r24, r28
 336:	0e 94 7f 02 	call	0x4fe	; 0x4fe <updateDutyCA>
 33a:	8f e3       	ldi	r24, 0x3F	; 63
 33c:	9c e9       	ldi	r25, 0x9C	; 156
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <main+0x14a>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x150>
 344:	00 00       	nop
			_delay_ms(10);
		}
		if (estado == 1) {
 346:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	09 f0       	breq	.+2      	; 0x350 <main+0x15c>
 34e:	89 cf       	rjmp	.-238    	; 0x262 <main+0x6e>
			PORTB &= ~(1 << PB5); // Apagar LED
 350:	85 b1       	in	r24, 0x05	; 5
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	85 b9       	out	0x05, r24	; 5
			PORTD |= (1 << PD7); // Encender LED (PD7 si tienes otro LED aquí)
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	8b b9       	out	0x0b, r24	; 11
 35c:	82 cf       	rjmp	.-252    	; 0x262 <main+0x6e>

0000035e <__vector_3>:
		}
	}
}

// Interrupción para los pulsadores
ISR(PCINT0_vect) {
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
	if (!(PINB & (1 << PB0))) {
 36c:	18 99       	sbic	0x03, 0	; 3
 36e:	11 c0       	rjmp	.+34     	; 0x392 <__vector_3+0x34>
 370:	8f e1       	ldi	r24, 0x1F	; 31
 372:	9e e4       	ldi	r25, 0x4E	; 78
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <__vector_3+0x16>
 378:	00 c0       	rjmp	.+0      	; 0x37a <__vector_3+0x1c>
 37a:	00 00       	nop
		_delay_ms(5); // Antirrebote
		if (!(PINB & (1 << PB0))) {
 37c:	18 99       	sbic	0x03, 0	; 3
 37e:	09 c0       	rjmp	.+18     	; 0x392 <__vector_3+0x34>
			estado++;
 380:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (estado >= 2) {
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	10 f0       	brcs	.+4      	; 0x392 <__vector_3+0x34>
				estado = 0; // Reiniciar la variable estado a 0
 38e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
	}
}
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_5>:

ISR(PCINT2_vect) {
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
	if (estado == 0) {
 3c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c6:	81 11       	cpse	r24, r1
 3c8:	34 c0       	rjmp	.+104    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		if (!(PIND & (1 << PD2))) {
 3ca:	4a 99       	sbic	0x09, 2	; 9
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <__vector_5+0x44>
 3ce:	8f e1       	ldi	r24, 0x1F	; 31
 3d0:	9e e4       	ldi	r25, 0x4E	; 78
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <__vector_5+0x32>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <__vector_5+0x38>
 3d8:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD2))) {
 3da:	4a 99       	sbic	0x09, 2	; 9
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <__vector_5+0x44>
				escribirADCEnEEPROM(0);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 86 00 	call	0x10c	; 0x10c <escribirADCEnEEPROM>
			}
		}
		if (!(PIND & (1 << PD3))) {
 3e4:	4b 99       	sbic	0x09, 3	; 9
 3e6:	0b c0       	rjmp	.+22     	; 0x3fe <__vector_5+0x5e>
 3e8:	8f e1       	ldi	r24, 0x1F	; 31
 3ea:	9e e4       	ldi	r25, 0x4E	; 78
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <__vector_5+0x4c>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <__vector_5+0x52>
 3f2:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD3))) {
 3f4:	4b 99       	sbic	0x09, 3	; 9
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <__vector_5+0x5e>
				escribirADCEnEEPROM(4);
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	0e 94 86 00 	call	0x10c	; 0x10c <escribirADCEnEEPROM>
			}
		}
		if (!(PIND & (1 << PD4))) {
 3fe:	4c 99       	sbic	0x09, 4	; 9
 400:	0b c0       	rjmp	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 402:	8f e1       	ldi	r24, 0x1F	; 31
 404:	9e e4       	ldi	r25, 0x4E	; 78
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD4))) {
 40e:	4c 99       	sbic	0x09, 4	; 9
 410:	03 c0       	rjmp	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				escribirADCEnEEPROM(8);
 412:	88 e0       	ldi	r24, 0x08	; 8
 414:	0e 94 86 00 	call	0x10c	; 0x10c <escribirADCEnEEPROM>
			}
		}
		if (!(PIND & (1 << PD7))) {
 418:	4f 99       	sbic	0x09, 7	; 9
 41a:	0b c0       	rjmp	.+22     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 41c:	8f e1       	ldi	r24, 0x1F	; 31
 41e:	9e e4       	ldi	r25, 0x4E	; 78
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD7))) {
 428:	4f 99       	sbic	0x09, 7	; 9
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				escribirADCEnEEPROM(12);
 42c:	8c e0       	ldi	r24, 0x0C	; 12
 42e:	0e 94 86 00 	call	0x10c	; 0x10c <escribirADCEnEEPROM>
			}
		}
	}
	if (estado == 1) {
 432:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	a1 f5       	brne	.+104    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		if (!(PIND & (1 << PD2))) {
 43a:	4a 99       	sbic	0x09, 2	; 9
 43c:	0b c0       	rjmp	.+22     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43e:	8f e1       	ldi	r24, 0x1F	; 31
 440:	9e e4       	ldi	r25, 0x4E	; 78
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD2))) {
 44a:	4a 99       	sbic	0x09, 2	; 9
 44c:	03 c0       	rjmp	.+6      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
				leerEEPROMYActualizarADC(0);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 ac 00 	call	0x158	; 0x158 <leerEEPROMYActualizarADC>
			}
		}
		if (!(PIND & (1 << PD3))) {
 454:	4b 99       	sbic	0x09, 3	; 9
 456:	0b c0       	rjmp	.+22     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 458:	8f e1       	ldi	r24, 0x1F	; 31
 45a:	9e e4       	ldi	r25, 0x4E	; 78
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD3))) {
 464:	4b 99       	sbic	0x09, 3	; 9
 466:	03 c0       	rjmp	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				leerEEPROMYActualizarADC(4);
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	0e 94 ac 00 	call	0x158	; 0x158 <leerEEPROMYActualizarADC>
			}
		}
		if (!(PIND & (1 << PD4))) {
 46e:	4c 99       	sbic	0x09, 4	; 9
 470:	0b c0       	rjmp	.+22     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 472:	8f e1       	ldi	r24, 0x1F	; 31
 474:	9e e4       	ldi	r25, 0x4E	; 78
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD4))) {
 47e:	4c 99       	sbic	0x09, 4	; 9
 480:	03 c0       	rjmp	.+6      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
				leerEEPROMYActualizarADC(8);
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	0e 94 ac 00 	call	0x158	; 0x158 <leerEEPROMYActualizarADC>
			}
		}
		if (!(PIND & (1 << PD7))) {
 488:	4f 99       	sbic	0x09, 7	; 9
 48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 48c:	8f e1       	ldi	r24, 0x1F	; 31
 48e:	9e e4       	ldi	r25, 0x4E	; 78
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 496:	00 00       	nop
			_delay_ms(5); // Antirrebote
			if (!(PIND & (1 << PD7))) {
 498:	4f 99       	sbic	0x09, 7	; 9
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				leerEEPROMYActualizarADC(12);
 49c:	8c e0       	ldi	r24, 0x0C	; 12
 49e:	0e 94 ac 00 	call	0x158	; 0x158 <leerEEPROMYActualizarADC>
			}
		}
	}
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <initPWM0A>:
	}
	
	if (prescaler == 1024) {
		TCCR0B |= (1 << CS02)|(1 << CS00);
		} else {
		TCCR0B |= (1 << CS00);
 4c4:	9a b1       	in	r25, 0x0a	; 10
 4c6:	90 64       	ori	r25, 0x40	; 64
 4c8:	9a b9       	out	0x0a, r25	; 10
 4ca:	94 b5       	in	r25, 0x24	; 36
 4cc:	93 60       	ori	r25, 0x03	; 3
 4ce:	94 bd       	out	0x24, r25	; 36
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 4d6:	88 23       	and	r24, r24
 4d8:	21 f0       	breq	.+8      	; 0x4e2 <initPWM0A+0x1e>
 4da:	84 b5       	in	r24, 0x24	; 36
 4dc:	80 6c       	ori	r24, 0xC0	; 192
 4de:	84 bd       	out	0x24, r24	; 36
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <initPWM0A+0x24>
 4e2:	84 b5       	in	r24, 0x24	; 36
 4e4:	80 68       	ori	r24, 0x80	; 128
 4e6:	84 bd       	out	0x24, r24	; 36
 4e8:	61 15       	cp	r22, r1
 4ea:	74 40       	sbci	r23, 0x04	; 4
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <initPWM0A+0x32>
 4ee:	85 b5       	in	r24, 0x25	; 37
 4f0:	85 60       	ori	r24, 0x05	; 5
 4f2:	85 bd       	out	0x25, r24	; 37
 4f4:	08 95       	ret
 4f6:	85 b5       	in	r24, 0x25	; 37
 4f8:	81 60       	ori	r24, 0x01	; 1
 4fa:	85 bd       	out	0x25, r24	; 37
 4fc:	08 95       	ret

000004fe <updateDutyCA>:
	}
}

void updateDutyCA(uint8_t duty){
	OCR0A = ((duty/255.0)*30)+6;
 4fe:	68 2f       	mov	r22, r24
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 40 05 	call	0xa80	; 0xa80 <__floatsisf>
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	4f e7       	ldi	r20, 0x7F	; 127
 510:	53 e4       	ldi	r21, 0x43	; 67
 512:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	40 ef       	ldi	r20, 0xF0	; 240
 51c:	51 e4       	ldi	r21, 0x41	; 65
 51e:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulsf3>
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 ec       	ldi	r20, 0xC0	; 192
 528:	50 e4       	ldi	r21, 0x40	; 64
 52a:	0e 94 31 04 	call	0x862	; 0x862 <__addsf3>
 52e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 532:	67 bd       	out	0x27, r22	; 39
 534:	08 95       	ret

00000536 <initPWM1>:
 */ 

#include "PWM1.h"

void initPWM1(void){
	DDRB |= (1<<DDB1);
 536:	84 b1       	in	r24, 0x04	; 4
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB2);	//CONFIGURATION OUTPUT PB1 AND PB2
 53c:	84 b1       	in	r24, 0x04	; 4
 53e:	84 60       	ori	r24, 0x04	; 4
 540:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(0<<COM1A0);
 542:	e0 e8       	ldi	r30, 0x80	; 128
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 ea       	ldi	r24, 0xA0	; 160
 548:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11)|(0<<WGM10);
 54a:	80 81       	ld	r24, Z
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM13)|(1<<WGM12);
 550:	e1 e8       	ldi	r30, 0x81	; 129
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	88 e1       	ldi	r24, 0x18	; 24
 556:	80 83       	st	Z, r24
	TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10);	// Prescaler de 8
 558:	80 81       	ld	r24, Z
 55a:	82 60       	ori	r24, 0x02	; 2
 55c:	80 83       	st	Z, r24
	ICR1 = 39999;	// VALOR TOP DE ICR1
 55e:	8f e3       	ldi	r24, 0x3F	; 63
 560:	9c e9       	ldi	r25, 0x9C	; 156
 562:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 566:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 56a:	08 95       	ret

0000056c <map1>:

void writecanalB(float adcV){
	OCR1B = map1(adcV, 0, 1024, 1000, 4800);
}

float map1(float x, float in_min, float in_max, float out_min, float out_max){
 56c:	4f 92       	push	r4
 56e:	5f 92       	push	r5
 570:	6f 92       	push	r6
 572:	7f 92       	push	r7
 574:	af 92       	push	r10
 576:	bf 92       	push	r11
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	28 97       	sbiw	r28, 0x08	; 8
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	29 01       	movw	r4, r18
 59a:	3a 01       	movw	r6, r20
 59c:	ed 82       	std	Y+5, r14	; 0x05
 59e:	fe 82       	std	Y+6, r15	; 0x06
 5a0:	0f 83       	std	Y+7, r16	; 0x07
 5a2:	18 87       	std	Y+8, r17	; 0x08
	return((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 5a4:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
 5a8:	69 83       	std	Y+1, r22	; 0x01
 5aa:	7a 83       	std	Y+2, r23	; 0x02
 5ac:	8b 83       	std	Y+3, r24	; 0x03
 5ae:	9c 83       	std	Y+4, r25	; 0x04
 5b0:	a6 01       	movw	r20, r12
 5b2:	95 01       	movw	r18, r10
 5b4:	69 8d       	ldd	r22, Y+25	; 0x19
 5b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
 5bc:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
 5c0:	9b 01       	movw	r18, r22
 5c2:	ac 01       	movw	r20, r24
 5c4:	69 81       	ldd	r22, Y+1	; 0x01
 5c6:	7a 81       	ldd	r23, Y+2	; 0x02
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	9c 81       	ldd	r25, Y+4	; 0x04
 5cc:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulsf3>
 5d0:	69 83       	std	Y+1, r22	; 0x01
 5d2:	7a 83       	std	Y+2, r23	; 0x02
 5d4:	8b 83       	std	Y+3, r24	; 0x03
 5d6:	9c 83       	std	Y+4, r25	; 0x04
 5d8:	a3 01       	movw	r20, r6
 5da:	92 01       	movw	r18, r4
 5dc:	c8 01       	movw	r24, r16
 5de:	b7 01       	movw	r22, r14
 5e0:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
 5e4:	9b 01       	movw	r18, r22
 5e6:	ac 01       	movw	r20, r24
 5e8:	69 81       	ldd	r22, Y+1	; 0x01
 5ea:	7a 81       	ldd	r23, Y+2	; 0x02
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	9c 81       	ldd	r25, Y+4	; 0x04
 5f0:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
 5f4:	9b 01       	movw	r18, r22
 5f6:	ac 01       	movw	r20, r24
 5f8:	c6 01       	movw	r24, r12
 5fa:	b5 01       	movw	r22, r10
 5fc:	0e 94 31 04 	call	0x862	; 0x862 <__addsf3>
 600:	28 96       	adiw	r28, 0x08	; 8
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	cf 90       	pop	r12
 61c:	bf 90       	pop	r11
 61e:	af 90       	pop	r10
 620:	7f 90       	pop	r7
 622:	6f 90       	pop	r6
 624:	5f 90       	pop	r5
 626:	4f 90       	pop	r4
 628:	08 95       	ret

0000062a <writecanalA>:
	TCCR1B = (1<<WGM13)|(1<<WGM12);
	TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10);	// Prescaler de 8
	ICR1 = 39999;	// VALOR TOP DE ICR1
}

void writecanalA(float adcV){
 62a:	af 92       	push	r10
 62c:	bf 92       	push	r11
 62e:	cf 92       	push	r12
 630:	df 92       	push	r13
 632:	ef 92       	push	r14
 634:	ff 92       	push	r15
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
	OCR1A = map1(adcV, 0, 1024, 1000, 4800);
 63a:	25 e4       	ldi	r18, 0x45	; 69
 63c:	2f 93       	push	r18
 63e:	26 e9       	ldi	r18, 0x96	; 150
 640:	2f 93       	push	r18
 642:	1f 92       	push	r1
 644:	1f 92       	push	r1
 646:	0f 2e       	mov	r0, r31
 648:	a1 2c       	mov	r10, r1
 64a:	b1 2c       	mov	r11, r1
 64c:	fa e7       	ldi	r31, 0x7A	; 122
 64e:	cf 2e       	mov	r12, r31
 650:	f4 e4       	ldi	r31, 0x44	; 68
 652:	df 2e       	mov	r13, r31
 654:	f0 2d       	mov	r31, r0
 656:	e1 2c       	mov	r14, r1
 658:	f1 2c       	mov	r15, r1
 65a:	00 e8       	ldi	r16, 0x80	; 128
 65c:	14 e4       	ldi	r17, 0x44	; 68
 65e:	20 e0       	ldi	r18, 0x00	; 0
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	a9 01       	movw	r20, r18
 664:	0e 94 b6 02 	call	0x56c	; 0x56c <map1>
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 674:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 678:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	ff 90       	pop	r15
 682:	ef 90       	pop	r14
 684:	df 90       	pop	r13
 686:	cf 90       	pop	r12
 688:	bf 90       	pop	r11
 68a:	af 90       	pop	r10
 68c:	08 95       	ret

0000068e <writecanalB>:

void writecanalB(float adcV){
 68e:	af 92       	push	r10
 690:	bf 92       	push	r11
 692:	cf 92       	push	r12
 694:	df 92       	push	r13
 696:	ef 92       	push	r14
 698:	ff 92       	push	r15
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
	OCR1B = map1(adcV, 0, 1024, 1000, 4800);
 69e:	25 e4       	ldi	r18, 0x45	; 69
 6a0:	2f 93       	push	r18
 6a2:	26 e9       	ldi	r18, 0x96	; 150
 6a4:	2f 93       	push	r18
 6a6:	1f 92       	push	r1
 6a8:	1f 92       	push	r1
 6aa:	0f 2e       	mov	r0, r31
 6ac:	a1 2c       	mov	r10, r1
 6ae:	b1 2c       	mov	r11, r1
 6b0:	fa e7       	ldi	r31, 0x7A	; 122
 6b2:	cf 2e       	mov	r12, r31
 6b4:	f4 e4       	ldi	r31, 0x44	; 68
 6b6:	df 2e       	mov	r13, r31
 6b8:	f0 2d       	mov	r31, r0
 6ba:	e1 2c       	mov	r14, r1
 6bc:	f1 2c       	mov	r15, r1
 6be:	00 e8       	ldi	r16, 0x80	; 128
 6c0:	14 e4       	ldi	r17, 0x44	; 68
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	a9 01       	movw	r20, r18
 6c8:	0e 94 b6 02 	call	0x56c	; 0x56c <map1>
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 6d8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6dc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	df 90       	pop	r13
 6ea:	cf 90       	pop	r12
 6ec:	bf 90       	pop	r11
 6ee:	af 90       	pop	r10
 6f0:	08 95       	ret

000006f2 <initPWM2A>:
 */ 

#include "PWM2.h"

void initPWM2A(uint8_t inverted, uint16_t prescaler){
	DDRB |= (1 << DDB3); //PD6 COMO SALIDA
 6f2:	94 b1       	in	r25, 0x04	; 4
 6f4:	98 60       	ori	r25, 0x08	; 8
 6f6:	94 b9       	out	0x04, r25	; 4
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
 6f8:	e0 eb       	ldi	r30, 0xB0	; 176
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	90 81       	ld	r25, Z
 6fe:	93 60       	ori	r25, 0x03	; 3
 700:	90 83       	st	Z, r25
	
	if (inverted) {
 702:	88 23       	and	r24, r24
 704:	21 f0       	breq	.+8      	; 0x70e <initPWM2A+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);//PWM INVERTIDO
 706:	80 81       	ld	r24, Z
 708:	80 6c       	ori	r24, 0xC0	; 192
 70a:	80 83       	st	Z, r24
 70c:	05 c0       	rjmp	.+10     	; 0x718 <initPWM2A+0x26>
		} else	 {
		TCCR2A |= (1 << COM2A1);//PWM NO INVERTIDO
 70e:	e0 eb       	ldi	r30, 0xB0	; 176
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	80 68       	ori	r24, 0x80	; 128
 716:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
 718:	61 15       	cp	r22, r1
 71a:	74 40       	sbci	r23, 0x04	; 4
 71c:	31 f4       	brne	.+12     	; 0x72a <initPWM2A+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 71e:	e1 eb       	ldi	r30, 0xB1	; 177
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	87 60       	ori	r24, 0x07	; 7
 726:	80 83       	st	Z, r24
 728:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 72a:	e1 eb       	ldi	r30, 0xB1	; 177
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	81 60       	ori	r24, 0x01	; 1
 732:	80 83       	st	Z, r24
 734:	08 95       	ret

00000736 <map2>:

void updateDutyCA2(uint8_t duty){
	OCR2A = map2(duty,0,255,6,36);
}

float map2(float x, float in_min, float in_max, float out_min, float out_max){
 736:	4f 92       	push	r4
 738:	5f 92       	push	r5
 73a:	6f 92       	push	r6
 73c:	7f 92       	push	r7
 73e:	af 92       	push	r10
 740:	bf 92       	push	r11
 742:	cf 92       	push	r12
 744:	df 92       	push	r13
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	28 97       	sbiw	r28, 0x08	; 8
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	f8 94       	cli
 75c:	de bf       	out	0x3e, r29	; 62
 75e:	0f be       	out	0x3f, r0	; 63
 760:	cd bf       	out	0x3d, r28	; 61
 762:	29 01       	movw	r4, r18
 764:	3a 01       	movw	r6, r20
 766:	ed 82       	std	Y+5, r14	; 0x05
 768:	fe 82       	std	Y+6, r15	; 0x06
 76a:	0f 83       	std	Y+7, r16	; 0x07
 76c:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 76e:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
 772:	69 83       	std	Y+1, r22	; 0x01
 774:	7a 83       	std	Y+2, r23	; 0x02
 776:	8b 83       	std	Y+3, r24	; 0x03
 778:	9c 83       	std	Y+4, r25	; 0x04
 77a:	a6 01       	movw	r20, r12
 77c:	95 01       	movw	r18, r10
 77e:	69 8d       	ldd	r22, Y+25	; 0x19
 780:	7a 8d       	ldd	r23, Y+26	; 0x1a
 782:	8b 8d       	ldd	r24, Y+27	; 0x1b
 784:	9c 8d       	ldd	r25, Y+28	; 0x1c
 786:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
 78a:	9b 01       	movw	r18, r22
 78c:	ac 01       	movw	r20, r24
 78e:	69 81       	ldd	r22, Y+1	; 0x01
 790:	7a 81       	ldd	r23, Y+2	; 0x02
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	9c 81       	ldd	r25, Y+4	; 0x04
 796:	0e 94 cc 05 	call	0xb98	; 0xb98 <__mulsf3>
 79a:	69 83       	std	Y+1, r22	; 0x01
 79c:	7a 83       	std	Y+2, r23	; 0x02
 79e:	8b 83       	std	Y+3, r24	; 0x03
 7a0:	9c 83       	std	Y+4, r25	; 0x04
 7a2:	a3 01       	movw	r20, r6
 7a4:	92 01       	movw	r18, r4
 7a6:	c8 01       	movw	r24, r16
 7a8:	b7 01       	movw	r22, r14
 7aa:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
 7ae:	9b 01       	movw	r18, r22
 7b0:	ac 01       	movw	r20, r24
 7b2:	69 81       	ldd	r22, Y+1	; 0x01
 7b4:	7a 81       	ldd	r23, Y+2	; 0x02
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ba:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
 7be:	9b 01       	movw	r18, r22
 7c0:	ac 01       	movw	r20, r24
 7c2:	c6 01       	movw	r24, r12
 7c4:	b5 01       	movw	r22, r10
 7c6:	0e 94 31 04 	call	0x862	; 0x862 <__addsf3>
}
 7ca:	28 96       	adiw	r28, 0x08	; 8
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	f8 94       	cli
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	cd bf       	out	0x3d, r28	; 61
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	1f 91       	pop	r17
 7dc:	0f 91       	pop	r16
 7de:	ff 90       	pop	r15
 7e0:	ef 90       	pop	r14
 7e2:	df 90       	pop	r13
 7e4:	cf 90       	pop	r12
 7e6:	bf 90       	pop	r11
 7e8:	af 90       	pop	r10
 7ea:	7f 90       	pop	r7
 7ec:	6f 90       	pop	r6
 7ee:	5f 90       	pop	r5
 7f0:	4f 90       	pop	r4
 7f2:	08 95       	ret

000007f4 <updateDutyCA2>:
		} else {
		TCCR2B |= (1 << CS20);
	}
}

void updateDutyCA2(uint8_t duty){
 7f4:	af 92       	push	r10
 7f6:	bf 92       	push	r11
 7f8:	cf 92       	push	r12
 7fa:	df 92       	push	r13
 7fc:	ef 92       	push	r14
 7fe:	ff 92       	push	r15
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
	OCR2A = map2(duty,0,255,6,36);
 804:	68 2f       	mov	r22, r24
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 810:	22 e4       	ldi	r18, 0x42	; 66
 812:	2f 93       	push	r18
 814:	20 e1       	ldi	r18, 0x10	; 16
 816:	2f 93       	push	r18
 818:	1f 92       	push	r1
 81a:	1f 92       	push	r1
 81c:	0f 2e       	mov	r0, r31
 81e:	a1 2c       	mov	r10, r1
 820:	b1 2c       	mov	r11, r1
 822:	f0 ec       	ldi	r31, 0xC0	; 192
 824:	cf 2e       	mov	r12, r31
 826:	f0 e4       	ldi	r31, 0x40	; 64
 828:	df 2e       	mov	r13, r31
 82a:	f0 2d       	mov	r31, r0
 82c:	e1 2c       	mov	r14, r1
 82e:	f1 2c       	mov	r15, r1
 830:	0f e7       	ldi	r16, 0x7F	; 127
 832:	13 e4       	ldi	r17, 0x43	; 67
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	a9 01       	movw	r20, r18
 83a:	0e 94 9b 03 	call	0x736	; 0x736 <map2>
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
 84a:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	af 90       	pop	r10
 85e:	08 95       	ret

00000860 <__subsf3>:
 860:	50 58       	subi	r21, 0x80	; 128

00000862 <__addsf3>:
 862:	bb 27       	eor	r27, r27
 864:	aa 27       	eor	r26, r26
 866:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3x>
 86a:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
 86e:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
 872:	38 f0       	brcs	.+14     	; 0x882 <__addsf3+0x20>
 874:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
 878:	20 f0       	brcs	.+8      	; 0x882 <__addsf3+0x20>
 87a:	39 f4       	brne	.+14     	; 0x88a <__addsf3+0x28>
 87c:	9f 3f       	cpi	r25, 0xFF	; 255
 87e:	19 f4       	brne	.+6      	; 0x886 <__addsf3+0x24>
 880:	26 f4       	brtc	.+8      	; 0x88a <__addsf3+0x28>
 882:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>
 886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3+0x28>
 888:	e0 95       	com	r30
 88a:	e7 fb       	bst	r30, 7
 88c:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>

00000890 <__addsf3x>:
 890:	e9 2f       	mov	r30, r25
 892:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
 896:	58 f3       	brcs	.-42     	; 0x86e <__addsf3+0xc>
 898:	ba 17       	cp	r27, r26
 89a:	62 07       	cpc	r22, r18
 89c:	73 07       	cpc	r23, r19
 89e:	84 07       	cpc	r24, r20
 8a0:	95 07       	cpc	r25, r21
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__addsf3x+0x1c>
 8a4:	79 f4       	brne	.+30     	; 0x8c4 <__addsf3x+0x34>
 8a6:	a6 f5       	brtc	.+104    	; 0x910 <__stack+0x11>
 8a8:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_zero>
 8ac:	0e f4       	brtc	.+2      	; 0x8b0 <__addsf3x+0x20>
 8ae:	e0 95       	com	r30
 8b0:	0b 2e       	mov	r0, r27
 8b2:	ba 2f       	mov	r27, r26
 8b4:	a0 2d       	mov	r26, r0
 8b6:	0b 01       	movw	r0, r22
 8b8:	b9 01       	movw	r22, r18
 8ba:	90 01       	movw	r18, r0
 8bc:	0c 01       	movw	r0, r24
 8be:	ca 01       	movw	r24, r20
 8c0:	a0 01       	movw	r20, r0
 8c2:	11 24       	eor	r1, r1
 8c4:	ff 27       	eor	r31, r31
 8c6:	59 1b       	sub	r21, r25
 8c8:	99 f0       	breq	.+38     	; 0x8f0 <__addsf3x+0x60>
 8ca:	59 3f       	cpi	r21, 0xF9	; 249
 8cc:	50 f4       	brcc	.+20     	; 0x8e2 <__addsf3x+0x52>
 8ce:	50 3e       	cpi	r21, 0xE0	; 224
 8d0:	68 f1       	brcs	.+90     	; 0x92c <__stack+0x2d>
 8d2:	1a 16       	cp	r1, r26
 8d4:	f0 40       	sbci	r31, 0x00	; 0
 8d6:	a2 2f       	mov	r26, r18
 8d8:	23 2f       	mov	r18, r19
 8da:	34 2f       	mov	r19, r20
 8dc:	44 27       	eor	r20, r20
 8de:	58 5f       	subi	r21, 0xF8	; 248
 8e0:	f3 cf       	rjmp	.-26     	; 0x8c8 <__addsf3x+0x38>
 8e2:	46 95       	lsr	r20
 8e4:	37 95       	ror	r19
 8e6:	27 95       	ror	r18
 8e8:	a7 95       	ror	r26
 8ea:	f0 40       	sbci	r31, 0x00	; 0
 8ec:	53 95       	inc	r21
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__addsf3x+0x52>
 8f0:	7e f4       	brtc	.+30     	; 0x910 <__stack+0x11>
 8f2:	1f 16       	cp	r1, r31
 8f4:	ba 0b       	sbc	r27, r26
 8f6:	62 0b       	sbc	r22, r18
 8f8:	73 0b       	sbc	r23, r19
 8fa:	84 0b       	sbc	r24, r20
 8fc:	ba f0       	brmi	.+46     	; 0x92c <__stack+0x2d>
 8fe:	91 50       	subi	r25, 0x01	; 1
 900:	a1 f0       	breq	.+40     	; 0x92a <__stack+0x2b>
 902:	ff 0f       	add	r31, r31
 904:	bb 1f       	adc	r27, r27
 906:	66 1f       	adc	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	c2 f7       	brpl	.-16     	; 0x8fe <__addsf3x+0x6e>
 90e:	0e c0       	rjmp	.+28     	; 0x92c <__stack+0x2d>
 910:	ba 0f       	add	r27, r26
 912:	62 1f       	adc	r22, r18
 914:	73 1f       	adc	r23, r19
 916:	84 1f       	adc	r24, r20
 918:	48 f4       	brcc	.+18     	; 0x92c <__stack+0x2d>
 91a:	87 95       	ror	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b7 95       	ror	r27
 922:	f7 95       	ror	r31
 924:	9e 3f       	cpi	r25, 0xFE	; 254
 926:	08 f0       	brcs	.+2      	; 0x92a <__stack+0x2b>
 928:	b0 cf       	rjmp	.-160    	; 0x88a <__addsf3+0x28>
 92a:	93 95       	inc	r25
 92c:	88 0f       	add	r24, r24
 92e:	08 f0       	brcs	.+2      	; 0x932 <__stack+0x33>
 930:	99 27       	eor	r25, r25
 932:	ee 0f       	add	r30, r30
 934:	97 95       	ror	r25
 936:	87 95       	ror	r24
 938:	08 95       	ret

0000093a <__divsf3>:
 93a:	0e 94 b1 04 	call	0x962	; 0x962 <__divsf3x>
 93e:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
 942:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
 946:	58 f0       	brcs	.+22     	; 0x95e <__divsf3+0x24>
 948:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
 94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0x24>
 94e:	29 f4       	brne	.+10     	; 0x95a <__divsf3+0x20>
 950:	5f 3f       	cpi	r21, 0xFF	; 255
 952:	29 f0       	breq	.+10     	; 0x95e <__divsf3+0x24>
 954:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
 958:	51 11       	cpse	r21, r1
 95a:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
 95e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>

00000962 <__divsf3x>:
 962:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
 966:	68 f3       	brcs	.-38     	; 0x942 <__divsf3+0x8>

00000968 <__divsf3_pse>:
 968:	99 23       	and	r25, r25
 96a:	b1 f3       	breq	.-20     	; 0x958 <__divsf3+0x1e>
 96c:	55 23       	and	r21, r21
 96e:	91 f3       	breq	.-28     	; 0x954 <__divsf3+0x1a>
 970:	95 1b       	sub	r25, r21
 972:	55 0b       	sbc	r21, r21
 974:	bb 27       	eor	r27, r27
 976:	aa 27       	eor	r26, r26
 978:	62 17       	cp	r22, r18
 97a:	73 07       	cpc	r23, r19
 97c:	84 07       	cpc	r24, r20
 97e:	38 f0       	brcs	.+14     	; 0x98e <__divsf3_pse+0x26>
 980:	9f 5f       	subi	r25, 0xFF	; 255
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	22 0f       	add	r18, r18
 986:	33 1f       	adc	r19, r19
 988:	44 1f       	adc	r20, r20
 98a:	aa 1f       	adc	r26, r26
 98c:	a9 f3       	breq	.-22     	; 0x978 <__divsf3_pse+0x10>
 98e:	35 d0       	rcall	.+106    	; 0x9fa <__divsf3_pse+0x92>
 990:	0e 2e       	mov	r0, r30
 992:	3a f0       	brmi	.+14     	; 0x9a2 <__divsf3_pse+0x3a>
 994:	e0 e8       	ldi	r30, 0x80	; 128
 996:	32 d0       	rcall	.+100    	; 0x9fc <__divsf3_pse+0x94>
 998:	91 50       	subi	r25, 0x01	; 1
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	e6 95       	lsr	r30
 99e:	00 1c       	adc	r0, r0
 9a0:	ca f7       	brpl	.-14     	; 0x994 <__divsf3_pse+0x2c>
 9a2:	2b d0       	rcall	.+86     	; 0x9fa <__divsf3_pse+0x92>
 9a4:	fe 2f       	mov	r31, r30
 9a6:	29 d0       	rcall	.+82     	; 0x9fa <__divsf3_pse+0x92>
 9a8:	66 0f       	add	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	bb 1f       	adc	r27, r27
 9b0:	26 17       	cp	r18, r22
 9b2:	37 07       	cpc	r19, r23
 9b4:	48 07       	cpc	r20, r24
 9b6:	ab 07       	cpc	r26, r27
 9b8:	b0 e8       	ldi	r27, 0x80	; 128
 9ba:	09 f0       	breq	.+2      	; 0x9be <__divsf3_pse+0x56>
 9bc:	bb 0b       	sbc	r27, r27
 9be:	80 2d       	mov	r24, r0
 9c0:	bf 01       	movw	r22, r30
 9c2:	ff 27       	eor	r31, r31
 9c4:	93 58       	subi	r25, 0x83	; 131
 9c6:	5f 4f       	sbci	r21, 0xFF	; 255
 9c8:	3a f0       	brmi	.+14     	; 0x9d8 <__divsf3_pse+0x70>
 9ca:	9e 3f       	cpi	r25, 0xFE	; 254
 9cc:	51 05       	cpc	r21, r1
 9ce:	78 f0       	brcs	.+30     	; 0x9ee <__divsf3_pse+0x86>
 9d0:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
 9d4:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	e4 f3       	brlt	.-8      	; 0x9d4 <__divsf3_pse+0x6c>
 9dc:	98 3e       	cpi	r25, 0xE8	; 232
 9de:	d4 f3       	brlt	.-12     	; 0x9d4 <__divsf3_pse+0x6c>
 9e0:	86 95       	lsr	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b7 95       	ror	r27
 9e8:	f7 95       	ror	r31
 9ea:	9f 5f       	subi	r25, 0xFF	; 255
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__divsf3_pse+0x78>
 9ee:	88 0f       	add	r24, r24
 9f0:	91 1d       	adc	r25, r1
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret
 9fa:	e1 e0       	ldi	r30, 0x01	; 1
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	bb 1f       	adc	r27, r27
 a04:	62 17       	cp	r22, r18
 a06:	73 07       	cpc	r23, r19
 a08:	84 07       	cpc	r24, r20
 a0a:	ba 07       	cpc	r27, r26
 a0c:	20 f0       	brcs	.+8      	; 0xa16 <__divsf3_pse+0xae>
 a0e:	62 1b       	sub	r22, r18
 a10:	73 0b       	sbc	r23, r19
 a12:	84 0b       	sbc	r24, r20
 a14:	ba 0b       	sbc	r27, r26
 a16:	ee 1f       	adc	r30, r30
 a18:	88 f7       	brcc	.-30     	; 0x9fc <__divsf3_pse+0x94>
 a1a:	e0 95       	com	r30
 a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
 a1e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_splitA>
 a22:	88 f0       	brcs	.+34     	; 0xa46 <__fixunssfsi+0x28>
 a24:	9f 57       	subi	r25, 0x7F	; 127
 a26:	98 f0       	brcs	.+38     	; 0xa4e <__fixunssfsi+0x30>
 a28:	b9 2f       	mov	r27, r25
 a2a:	99 27       	eor	r25, r25
 a2c:	b7 51       	subi	r27, 0x17	; 23
 a2e:	b0 f0       	brcs	.+44     	; 0xa5c <__fixunssfsi+0x3e>
 a30:	e1 f0       	breq	.+56     	; 0xa6a <__fixunssfsi+0x4c>
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	1a f0       	brmi	.+6      	; 0xa42 <__fixunssfsi+0x24>
 a3c:	ba 95       	dec	r27
 a3e:	c9 f7       	brne	.-14     	; 0xa32 <__fixunssfsi+0x14>
 a40:	14 c0       	rjmp	.+40     	; 0xa6a <__fixunssfsi+0x4c>
 a42:	b1 30       	cpi	r27, 0x01	; 1
 a44:	91 f0       	breq	.+36     	; 0xa6a <__fixunssfsi+0x4c>
 a46:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_zero>
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	08 95       	ret
 a4e:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_zero>
 a52:	67 2f       	mov	r22, r23
 a54:	78 2f       	mov	r23, r24
 a56:	88 27       	eor	r24, r24
 a58:	b8 5f       	subi	r27, 0xF8	; 248
 a5a:	39 f0       	breq	.+14     	; 0xa6a <__fixunssfsi+0x4c>
 a5c:	b9 3f       	cpi	r27, 0xF9	; 249
 a5e:	cc f3       	brlt	.-14     	; 0xa52 <__fixunssfsi+0x34>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b3 95       	inc	r27
 a68:	d9 f7       	brne	.-10     	; 0xa60 <__fixunssfsi+0x42>
 a6a:	3e f4       	brtc	.+14     	; 0xa7a <__fixunssfsi+0x5c>
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__floatunsisf>:
 a7c:	e8 94       	clt
 a7e:	09 c0       	rjmp	.+18     	; 0xa92 <__floatsisf+0x12>

00000a80 <__floatsisf>:
 a80:	97 fb       	bst	r25, 7
 a82:	3e f4       	brtc	.+14     	; 0xa92 <__floatsisf+0x12>
 a84:	90 95       	com	r25
 a86:	80 95       	com	r24
 a88:	70 95       	com	r23
 a8a:	61 95       	neg	r22
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	99 23       	and	r25, r25
 a94:	a9 f0       	breq	.+42     	; 0xac0 <__floatsisf+0x40>
 a96:	f9 2f       	mov	r31, r25
 a98:	96 e9       	ldi	r25, 0x96	; 150
 a9a:	bb 27       	eor	r27, r27
 a9c:	93 95       	inc	r25
 a9e:	f6 95       	lsr	r31
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f1 11       	cpse	r31, r1
 aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <__floatsisf+0x1c>
 aac:	fa f4       	brpl	.+62     	; 0xaec <__floatsisf+0x6c>
 aae:	bb 0f       	add	r27, r27
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__floatsisf+0x36>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	1b c0       	rjmp	.+54     	; 0xaec <__floatsisf+0x6c>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	16 c0       	rjmp	.+44     	; 0xaec <__floatsisf+0x6c>
 ac0:	88 23       	and	r24, r24
 ac2:	11 f0       	breq	.+4      	; 0xac8 <__floatsisf+0x48>
 ac4:	96 e9       	ldi	r25, 0x96	; 150
 ac6:	11 c0       	rjmp	.+34     	; 0xaea <__floatsisf+0x6a>
 ac8:	77 23       	and	r23, r23
 aca:	21 f0       	breq	.+8      	; 0xad4 <__floatsisf+0x54>
 acc:	9e e8       	ldi	r25, 0x8E	; 142
 ace:	87 2f       	mov	r24, r23
 ad0:	76 2f       	mov	r23, r22
 ad2:	05 c0       	rjmp	.+10     	; 0xade <__floatsisf+0x5e>
 ad4:	66 23       	and	r22, r22
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__floatsisf+0x74>
 ad8:	96 e8       	ldi	r25, 0x86	; 134
 ada:	86 2f       	mov	r24, r22
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	2a f0       	brmi	.+10     	; 0xaec <__floatsisf+0x6c>
 ae2:	9a 95       	dec	r25
 ae4:	66 0f       	add	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	da f7       	brpl	.-10     	; 0xae2 <__floatsisf+0x62>
 aec:	88 0f       	add	r24, r24
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__fp_inf>:
 af6:	97 f9       	bld	r25, 7
 af8:	9f 67       	ori	r25, 0x7F	; 127
 afa:	80 e8       	ldi	r24, 0x80	; 128
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	60 e0       	ldi	r22, 0x00	; 0
 b00:	08 95       	ret

00000b02 <__fp_nan>:
 b02:	9f ef       	ldi	r25, 0xFF	; 255
 b04:	80 ec       	ldi	r24, 0xC0	; 192
 b06:	08 95       	ret

00000b08 <__fp_pscA>:
 b08:	00 24       	eor	r0, r0
 b0a:	0a 94       	dec	r0
 b0c:	16 16       	cp	r1, r22
 b0e:	17 06       	cpc	r1, r23
 b10:	18 06       	cpc	r1, r24
 b12:	09 06       	cpc	r0, r25
 b14:	08 95       	ret

00000b16 <__fp_pscB>:
 b16:	00 24       	eor	r0, r0
 b18:	0a 94       	dec	r0
 b1a:	12 16       	cp	r1, r18
 b1c:	13 06       	cpc	r1, r19
 b1e:	14 06       	cpc	r1, r20
 b20:	05 06       	cpc	r0, r21
 b22:	08 95       	ret

00000b24 <__fp_round>:
 b24:	09 2e       	mov	r0, r25
 b26:	03 94       	inc	r0
 b28:	00 0c       	add	r0, r0
 b2a:	11 f4       	brne	.+4      	; 0xb30 <__fp_round+0xc>
 b2c:	88 23       	and	r24, r24
 b2e:	52 f0       	brmi	.+20     	; 0xb44 <__fp_round+0x20>
 b30:	bb 0f       	add	r27, r27
 b32:	40 f4       	brcc	.+16     	; 0xb44 <__fp_round+0x20>
 b34:	bf 2b       	or	r27, r31
 b36:	11 f4       	brne	.+4      	; 0xb3c <__fp_round+0x18>
 b38:	60 ff       	sbrs	r22, 0
 b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__fp_round+0x20>
 b3c:	6f 5f       	subi	r22, 0xFF	; 255
 b3e:	7f 4f       	sbci	r23, 0xFF	; 255
 b40:	8f 4f       	sbci	r24, 0xFF	; 255
 b42:	9f 4f       	sbci	r25, 0xFF	; 255
 b44:	08 95       	ret

00000b46 <__fp_split3>:
 b46:	57 fd       	sbrc	r21, 7
 b48:	90 58       	subi	r25, 0x80	; 128
 b4a:	44 0f       	add	r20, r20
 b4c:	55 1f       	adc	r21, r21
 b4e:	59 f0       	breq	.+22     	; 0xb66 <__fp_splitA+0x10>
 b50:	5f 3f       	cpi	r21, 0xFF	; 255
 b52:	71 f0       	breq	.+28     	; 0xb70 <__fp_splitA+0x1a>
 b54:	47 95       	ror	r20

00000b56 <__fp_splitA>:
 b56:	88 0f       	add	r24, r24
 b58:	97 fb       	bst	r25, 7
 b5a:	99 1f       	adc	r25, r25
 b5c:	61 f0       	breq	.+24     	; 0xb76 <__fp_splitA+0x20>
 b5e:	9f 3f       	cpi	r25, 0xFF	; 255
 b60:	79 f0       	breq	.+30     	; 0xb80 <__fp_splitA+0x2a>
 b62:	87 95       	ror	r24
 b64:	08 95       	ret
 b66:	12 16       	cp	r1, r18
 b68:	13 06       	cpc	r1, r19
 b6a:	14 06       	cpc	r1, r20
 b6c:	55 1f       	adc	r21, r21
 b6e:	f2 cf       	rjmp	.-28     	; 0xb54 <__fp_split3+0xe>
 b70:	46 95       	lsr	r20
 b72:	f1 df       	rcall	.-30     	; 0xb56 <__fp_splitA>
 b74:	08 c0       	rjmp	.+16     	; 0xb86 <__fp_splitA+0x30>
 b76:	16 16       	cp	r1, r22
 b78:	17 06       	cpc	r1, r23
 b7a:	18 06       	cpc	r1, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	f1 cf       	rjmp	.-30     	; 0xb62 <__fp_splitA+0xc>
 b80:	86 95       	lsr	r24
 b82:	71 05       	cpc	r23, r1
 b84:	61 05       	cpc	r22, r1
 b86:	08 94       	sec
 b88:	08 95       	ret

00000b8a <__fp_zero>:
 b8a:	e8 94       	clt

00000b8c <__fp_szero>:
 b8c:	bb 27       	eor	r27, r27
 b8e:	66 27       	eor	r22, r22
 b90:	77 27       	eor	r23, r23
 b92:	cb 01       	movw	r24, r22
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret

00000b98 <__mulsf3>:
 b98:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3x>
 b9c:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_round>
 ba0:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_pscA>
 ba4:	38 f0       	brcs	.+14     	; 0xbb4 <__mulsf3+0x1c>
 ba6:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscB>
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__mulsf3+0x1c>
 bac:	95 23       	and	r25, r21
 bae:	11 f0       	breq	.+4      	; 0xbb4 <__mulsf3+0x1c>
 bb0:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
 bb4:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_nan>
 bb8:	11 24       	eor	r1, r1
 bba:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>

00000bbe <__mulsf3x>:
 bbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_split3>
 bc2:	70 f3       	brcs	.-36     	; 0xba0 <__mulsf3+0x8>

00000bc4 <__mulsf3_pse>:
 bc4:	95 9f       	mul	r25, r21
 bc6:	c1 f3       	breq	.-16     	; 0xbb8 <__mulsf3+0x20>
 bc8:	95 0f       	add	r25, r21
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	55 1f       	adc	r21, r21
 bce:	62 9f       	mul	r22, r18
 bd0:	f0 01       	movw	r30, r0
 bd2:	72 9f       	mul	r23, r18
 bd4:	bb 27       	eor	r27, r27
 bd6:	f0 0d       	add	r31, r0
 bd8:	b1 1d       	adc	r27, r1
 bda:	63 9f       	mul	r22, r19
 bdc:	aa 27       	eor	r26, r26
 bde:	f0 0d       	add	r31, r0
 be0:	b1 1d       	adc	r27, r1
 be2:	aa 1f       	adc	r26, r26
 be4:	64 9f       	mul	r22, r20
 be6:	66 27       	eor	r22, r22
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	66 1f       	adc	r22, r22
 bee:	82 9f       	mul	r24, r18
 bf0:	22 27       	eor	r18, r18
 bf2:	b0 0d       	add	r27, r0
 bf4:	a1 1d       	adc	r26, r1
 bf6:	62 1f       	adc	r22, r18
 bf8:	73 9f       	mul	r23, r19
 bfa:	b0 0d       	add	r27, r0
 bfc:	a1 1d       	adc	r26, r1
 bfe:	62 1f       	adc	r22, r18
 c00:	83 9f       	mul	r24, r19
 c02:	a0 0d       	add	r26, r0
 c04:	61 1d       	adc	r22, r1
 c06:	22 1f       	adc	r18, r18
 c08:	74 9f       	mul	r23, r20
 c0a:	33 27       	eor	r19, r19
 c0c:	a0 0d       	add	r26, r0
 c0e:	61 1d       	adc	r22, r1
 c10:	23 1f       	adc	r18, r19
 c12:	84 9f       	mul	r24, r20
 c14:	60 0d       	add	r22, r0
 c16:	21 1d       	adc	r18, r1
 c18:	82 2f       	mov	r24, r18
 c1a:	76 2f       	mov	r23, r22
 c1c:	6a 2f       	mov	r22, r26
 c1e:	11 24       	eor	r1, r1
 c20:	9f 57       	subi	r25, 0x7F	; 127
 c22:	50 40       	sbci	r21, 0x00	; 0
 c24:	9a f0       	brmi	.+38     	; 0xc4c <__mulsf3_pse+0x88>
 c26:	f1 f0       	breq	.+60     	; 0xc64 <__mulsf3_pse+0xa0>
 c28:	88 23       	and	r24, r24
 c2a:	4a f0       	brmi	.+18     	; 0xc3e <__mulsf3_pse+0x7a>
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	bb 1f       	adc	r27, r27
 c32:	66 1f       	adc	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	91 50       	subi	r25, 0x01	; 1
 c3a:	50 40       	sbci	r21, 0x00	; 0
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__mulsf3_pse+0x64>
 c3e:	9e 3f       	cpi	r25, 0xFE	; 254
 c40:	51 05       	cpc	r21, r1
 c42:	80 f0       	brcs	.+32     	; 0xc64 <__mulsf3_pse+0xa0>
 c44:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
 c48:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_szero>
 c4c:	5f 3f       	cpi	r21, 0xFF	; 255
 c4e:	e4 f3       	brlt	.-8      	; 0xc48 <__mulsf3_pse+0x84>
 c50:	98 3e       	cpi	r25, 0xE8	; 232
 c52:	d4 f3       	brlt	.-12     	; 0xc48 <__mulsf3_pse+0x84>
 c54:	86 95       	lsr	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f7 95       	ror	r31
 c5e:	e7 95       	ror	r30
 c60:	9f 5f       	subi	r25, 0xFF	; 255
 c62:	c1 f7       	brne	.-16     	; 0xc54 <__mulsf3_pse+0x90>
 c64:	fe 2b       	or	r31, r30
 c66:	88 0f       	add	r24, r24
 c68:	91 1d       	adc	r25, r1
 c6a:	96 95       	lsr	r25
 c6c:	87 95       	ror	r24
 c6e:	97 f9       	bld	r25, 7
 c70:	08 95       	ret

00000c72 <eeprom_read_byte>:
 c72:	f9 99       	sbic	0x1f, 1	; 31
 c74:	fe cf       	rjmp	.-4      	; 0xc72 <eeprom_read_byte>
 c76:	92 bd       	out	0x22, r25	; 34
 c78:	81 bd       	out	0x21, r24	; 33
 c7a:	f8 9a       	sbi	0x1f, 0	; 31
 c7c:	99 27       	eor	r25, r25
 c7e:	80 b5       	in	r24, 0x20	; 32
 c80:	08 95       	ret

00000c82 <eeprom_update_byte>:
 c82:	26 2f       	mov	r18, r22

00000c84 <eeprom_update_r18>:
 c84:	f9 99       	sbic	0x1f, 1	; 31
 c86:	fe cf       	rjmp	.-4      	; 0xc84 <eeprom_update_r18>
 c88:	92 bd       	out	0x22, r25	; 34
 c8a:	81 bd       	out	0x21, r24	; 33
 c8c:	f8 9a       	sbi	0x1f, 0	; 31
 c8e:	01 97       	sbiw	r24, 0x01	; 1
 c90:	00 b4       	in	r0, 0x20	; 32
 c92:	02 16       	cp	r0, r18
 c94:	39 f0       	breq	.+14     	; 0xca4 <eeprom_update_r18+0x20>
 c96:	1f ba       	out	0x1f, r1	; 31
 c98:	20 bd       	out	0x20, r18	; 32
 c9a:	0f b6       	in	r0, 0x3f	; 63
 c9c:	f8 94       	cli
 c9e:	fa 9a       	sbi	0x1f, 2	; 31
 ca0:	f9 9a       	sbi	0x1f, 1	; 31
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	08 95       	ret

00000ca6 <_exit>:
 ca6:	f8 94       	cli

00000ca8 <__stop_program>:
 ca8:	ff cf       	rjmp	.-2      	; 0xca8 <__stop_program>
